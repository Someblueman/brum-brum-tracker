name: Code Quality

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pylint black isort
      
      - name: Check code formatting with Black
        run: black --check backend/ tests/
        continue-on-error: true
      
      - name: Check import sorting with isort
        run: isort --check-only backend/ tests/
        continue-on-error: true
      
      - name: Run Pylint
        run: pylint backend/ --exit-zero
      
      - name: Check for code complexity
        run: |
          pip install radon
          radon cc backend/ -a -nc
      
      - name: Check for duplicate code
        run: |
          pip install pylint
          pylint backend/ --disable=all --enable=duplicate-code --exit-zero
      
      - name: Generate code quality report
        run: |
          echo "## Code Quality Report" > code-quality-report.md
          echo "" >> code-quality-report.md
          echo "### Complexity Analysis" >> code-quality-report.md
          radon cc backend/ -a >> code-quality-report.md || true
          echo "" >> code-quality-report.md
          echo "### Maintainability Index" >> code-quality-report.md
          radon mi backend/ >> code-quality-report.md || true
      
      - name: Comment PR with report
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('code-quality-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });